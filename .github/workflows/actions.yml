name: Marmota Salvaje

on:
  push:
    branches: [ "development", "feature/backend" ]
  pull_request:
    branches: [ "development" ]
env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: anassantosc/docker-backend-github:latest
  FRONTEND_IMAGE_NAME: anassantosc/docker-frontend-github:latest

jobs:
  test-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Run unit tests
        working-directory: backend
        run: bash ./gradlew test

  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: test-backend
    if: ${{ needs.test-backend.result == 'success' }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Build with Gradle Wrapper
        working-directory: backend
        run: bash ./gradlew build

      - name: Transfer build using SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: ./backend/build
          target: ~/blue-team

  #test-frontend:
  #  runs-on: ubuntu-latest
  #  permissions:
  #    contents: read
  #  steps:
  #    - uses: actions/checkout@v4
#
 #     - name: Setup Node.js
  #      uses: actions/setup-node@v4
   #     with:
    #      node-version: '18'

#      - name: Install dependencies
 #       working-directory: frontend
  #      run: npm install
#
 #     - name: Run frontend tests
  #      working-directory: frontend
   #     run: npm run test

  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    #needs: test-frontend
    #if: ${{ needs.test-frontend.result == 'success' }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: frontend
        run: npm install

      - name: Build with Next
        working-directory: frontend
        run: npm run build

      - name: Transfer dist using SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: ./frontend/dist
          target: ~/blue-team
  publish:
    runs-on: ubuntu-latest
    needs:
      - build-frontend
      - build-backend
    if: ${{ needs.build-frontend.result == 'success' && needs.build-backend.result == 'success' }}

    steps:
      - uses: actions/checkout@v4
      - name: Login
        run: |
          echo ${{secrets.PAT}} | docker login ghcr.io -u anassantosc --password-stdin

      - name: Build Backend and Publish
        run: |
          docker build . --file backend/Dockerfile --tag ${{env.REGISTRY}}/${{env.BACKEND_IMAGE_NAME}}
          docker push ${{env.REGISTRY}}/${{env.BACKEND_IMAGE_NAME}}

      - name: Build Frontend and Publish
        run: |
          docker build . --file frontend/Dockerfile --tag ${{env.REGISTRY}}/${{env.FRONTEND_IMAGE_NAME}}
          docker push ${{env.REGISTRY}}/${{env.FRONTEND_IMAGE_NAME}}

  deploy:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Pull Docker Images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd blue-team
            echo ${{secrets.PAT}} | docker login ghcr.io -u anassantosc --password-stdin
            docker compose down --rmi all
            docker image prune --all --force
            docker compose pull
            docker compose up -d
            exit
